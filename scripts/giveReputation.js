const { ethers } = require("hardhat");

const CONTRACTS = {
  activaNFT: "0x6fF6aD8216dD1454bC977Ebb72C83aD96C034E28",
  marketplace: "0x721aE67eC40BA624486CF9a2fE64309bB11536F3"
};

async function main() {
  console.log("üöÄ Dando reputaci√≥n al deployer...");

  const [deployer] = await ethers.getSigners();
  console.log("üìù Cuenta:", deployer.address);

  // Conectar a contratos
  const activaNFT = await ethers.getContractAt("ActivaNFT", CONTRACTS.activaNFT);

  // Verificar reputaci√≥n actual
  const currentReputation = await activaNFT.reputationScore(deployer.address);
  console.log(`‚≠ê Reputaci√≥n actual: ${currentReputation}`);

  if (currentReputation >= 100) {
    console.log("‚úÖ Ya tiene suficiente reputaci√≥n");
    return;
  }

  // Crear certificaci√≥n con alta reputaci√≥n
  console.log("\nüìú Creando certificaci√≥n...");
  try {
    const tx = await activaNFT.mintCertification(
      deployer.address,
      "ActivaChain Master Developer",
      3, // Nivel avanzado
      200, // Score alto
      "https://api.activachain.com/metadata/master-dev"
    );
    await tx.wait();
    console.log("‚úÖ Certificaci√≥n creada");

    // Verificar nueva reputaci√≥n
    const newReputation = await activaNFT.reputationScore(deployer.address);
    console.log(`‚≠ê Nueva reputaci√≥n: ${newReputation}`);

    if (newReputation >= 100) {
      console.log("üéâ ¬°Reputaci√≥n suficiente para crear servicios!");
    } else {
      console.log("‚ö†Ô∏è  A√∫n necesita m√°s reputaci√≥n");
    }
  } catch (error) {
    console.log("‚ùå Error creando certificaci√≥n:", error.message);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Error:", error);
    process.exit(1);
  });
